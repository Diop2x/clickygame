{"version":3,"sources":["components/Card/Card.jsx","components/Footer/Footer.jsx","components/Header/Header.jsx","components/Navbar/Navbar.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["Card","_ref","clickHandler","id","image","name","react_default","a","createElement","className","src","alt","onClick","Footer","Header","Navbar","message","score","topScore","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","removeAnimation","element","document","getElementById","state","isGuessCorrect","classList","remove","addAnimation","isCorrect","add","toggleAnimation","setTimeout","handleSaveClick","tilez","tiles","tileClicked","filter","tile","clicked","handleIncorrectClick","handleCorrectClick","randomizeCharacters","setState","characters","sort","b","Math","random","maxScore","messageClass","resetGame","i","length","_this2","_this$state","Navbar_Navbar","Header_Header","map","Card_Card","key","Footer_Footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3afb8ccc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card({ clickHandler, id, image, name }) {\n  return (\n    <div className=\"card-holder\">\n      <img\n        src={image}\n        alt={name}\n        className=\"card-select grow img-thumbnail m-2 pointer\"\n        onClick={() => clickHandler(id)}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className=\"colors position-relative footer footer-100 footer-mgn navbar p-0\">\n      <span className=\"text-muted\" />\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"align-items-center bg-header jumbotron header-hgt header-pad head-mar-top nav-shadow neon text-center yx-auto text-center\">\n      <h1 className>\n        Click on an image to earn points,\n      </h1>\n      <h1 className>\n        Don't click on any more than once!\n      </h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Navbar({ message, score, topScore }) {\n  return (\n    <nav className=\"bg-nav fixed-top navbar nav-height nav-shadow p-0 tp-text\">\n      <ul className=\"row center list-inline m-0 nav-fill nav-height nav-width\">\n        <li className=\"col list-inline-item my-auto nav-calc-font p-0 m-0 text-center\">\n          <a\n            className=\"nav-calc-font navbar-brand p-0 m-0 title-line-hgt\"\n            href=\"/\"\n          >\n            NARUTO<br />\n            MEMORY GAME\n          </a>\n        </li>\n        <li\n          id=\"animate-this\"\n          className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 text-center\"\n        >\n          {message}\n        </li>\n        <li className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 score-li-width text-center\">\n          SCORE: {score} | TOP SCORE: {topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import \"./App.css\";\n\n// This actually imports the React node modules\nimport React, { Component } from \"react\";\n\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport tiles from \"./tiles.json\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isGuessCorrect: true,\n      tiles: tiles,\n      score: 0,\n      maxScore: 12,\n      topScore: 0,\n      message: \"CLICK AN IMAGE TO BEGIN!\"\n    };\n  }\n\n  \n  removeAnimation = () => {\n    // Grab the text at the top middle of the page\n    let element = document.getElementById(\"animate-this\");\n    // If the guess is correct...\n    if (this.state.isGuessCorrect) {\n      // ...remove the animation style of the correct guess\n      element.classList.remove(\"jello-vertical\");\n    }\n    // If the guess is incorrect...\n    if (!this.state.isGuessCorrect) {\n      // ...remove the animation style of the incorrect guess\n      element.classList.remove(\"shake-horizontal\");\n    }\n  };\n\n  // ADDS animation CSS class\n  addAnimation = isCorrect => {\n    // Grab the text at the top middle of the page\n    let element = document.getElementById(\"animate-this\");\n    // If the guess is correct...\n    if (isCorrect) {\n      // ...add the animation style of the correct guess\n      element.classList.add(\"jello-vertical\");\n    }\n    // If the guess is incorrect...\n    if (!isCorrect) {\n      // ...add the animation style of the incorrect guess\n      element.classList.add(\"shake-horizontal\");\n    }\n  };\n\n  // TOGGLES the CSS class for animation\n  toggleAnimation = isCorrect => {\n    // If the guess is correct...\n    if (isCorrect) {\n      // Add animation\n      this.addAnimation(true);\n      // Wait a split second and then remove it\n      setTimeout(this.removeAnimation, 500);\n    }\n    // If the guess is incorrect...\n    if (!isCorrect) {\n      // Add animation\n      this.addAnimation(false);\n      // Wait a split second and then remove it\n      setTimeout(this.removeAnimation, 500);\n    }\n  };\n\n  \n  handleSaveClick = id => {\n    // Variable to hold the tiles state.\n    const tilez = this.state.tiles;\n    // Search through character tiles to find the one that matches the clicked id.\n    const tileClicked = tilez.filter(tile => tile.id === id);\n\n    // If the tile isn't clicked...\n    if (!tileClicked[0].clicked) {\n      // ...set it to now be clicked\n      tileClicked[0].clicked = true;\n      // ...call this function to register the correct guess\n      this.handleCorrectClick();\n      // ...add the bouncy animation for correct guess\n      this.toggleAnimation(true);\n\n      // ... randomize character tiles\n      this.randomizeCharacters(tilez);\n\n      this.setState({ tilez });\n    } else {\n      this.handleIncorrectClick();\n      this.toggleAnimation(false);\n    }\n  };\n\n  // Function to randomize the characters\n  randomizeCharacters = characters => {\n    characters.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  // Handler for correct guesses/clicks\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"CONGRATS! YOU WIN!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"YOU GUESSED CORRECTLY!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handler for incorrect guesses/clicks\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"INCORRECT. PLAY AGAIN?\",\n      isGuessCorrect: false\n    });\n    // this.toggleIncorrectAnimation();\n    this.resetGame();\n  };\n\n  // Resets the game\n  resetGame = id => {\n    const tilez = this.state.tiles;\n    for (let i = 0; i < tilez.length; i++) {\n      tilez[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  \n  render() {\n    const { message, score, tiles, topScore } = this.state;\n    return (\n      <div className=\"fluid-container lodge h-100vh\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          topScore={topScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\">\n          {tiles.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n        <Footer className=\"footer-mgn row\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./index.css\";\n\nimport App from \"./App.jsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}